# Product Requirements Document (PRD)
# API Flask Web Scraping - Dockerização e Sistema de Cache

## Visão Geral do Projeto
Evolução da API Flask de Web Scraping de dados vitivinícolas da Embrapa para incluir containerização com Docker e sistema de cache robusto usando Redis.

## Objetivos Principais
1. Containerizar a aplicação usando Docker Compose
2. Implementar sistema de cache em duas camadas usando Redis
3. Melhorar performance e resiliência da API
4. Adicionar configuração flexível via variáveis de ambiente

## Requisitos Funcionais

### 1. Containerização com Docker
- Criar Dockerfile para a aplicação Flask
- Configurar Docker Compose com serviços:
  - Aplicação Flask (app)
  - Redis (cache)
  - Rede interna para comunicação entre serviços
- Configurar volumes para persistência de dados
- Definir variáveis de ambiente no docker-compose.yml

### 2. Sistema de Cache com Redis
#### 2.1 Short-term Cache (Cache de Requisições)
- Cache das respostas das requisições HTTP
- Tempo de expiração configurável via variável de ambiente
- Valor padrão: 5 minutos (300 segundos)
- Chave de cache baseada na URL completa da requisição
- Aplicar cache apenas para requisições GET bem-sucedidas (status 200)

#### 2.2 Long-term Cache (Cache de Fallback)
- Cache dos dados de web scraping como fallback
- Armazenar resultado do scraping independente do cache de requisição
- Usar quando o site da Embrapa estiver indisponível
- Tempo de expiração mais longo (ex: 24 horas)
- Chave de cache baseada nos parâmetros de scraping (opcao, ano, subopcao)

### 3. Indicadores de Cache
- Adicionar campo "cached" nos responses JSON
- Valores possíveis:
  - false: dados obtidos diretamente do web scraping
  - "short_term": dados vindos do cache de requisições
  - "fallback": dados vindos do cache de fallback (site indisponível)

### 4. Configuração via Variáveis de Ambiente
- REDIS_HOST: Host do Redis (padrão: redis)
- REDIS_PORT: Porta do Redis (padrão: 6379)
- REDIS_DB: Database do Redis (padrão: 0)
- SHORT_CACHE_TTL: TTL do cache de requisições em segundos (padrão: 300)
- FALLBACK_CACHE_TTL: TTL do cache de fallback em segundos (padrão: 86400)
- REDIS_PASSWORD: Senha do Redis (opcional)

## Requisitos Técnicos

### Stack Tecnológica
- Python 3.12+ com Flask
- Redis 7.0+
- Docker & Docker Compose
- Bibliotecas Python adicionais:
  - redis
  - python-dotenv (para variáveis de ambiente)

### Estrutura de Arquivos
```
/
├── app.py (aplicação principal)
├── Dockerfile
├── docker-compose.yml
├── requirements.txt (atualizado)
├── .env.example
├── cache/
│   ├── __init__.py
│   ├── redis_client.py
│   └── cache_manager.py
└── scripts/
    └── prd.txt
```

### Endpoints Afetados
Todos os endpoints de dados devem implementar o sistema de cache:
- /producao
- /processamento
- /comercializacao
- /importacao
- /exportacao

Endpoints que NÃO devem ser cacheados:
- /heartbeat (sempre tempo real)
- /test (sempre tempo real)
- / (informações da API)

## Critérios de Aceitação

### Docker & Compose
- [ ] Aplicação roda completamente via docker-compose up
- [ ] Redis acessível internamente pela aplicação
- [ ] Variáveis de ambiente configuradas corretamente
- [ ] Logs estruturados e acessíveis
- [ ] Health checks configurados

### Sistema de Cache
- [ ] Cache de requisições funciona com TTL configurável
- [ ] Cache de fallback ativa quando site está indisponível
- [ ] Responses incluem flag "cached" corretamente
- [ ] Performance melhorada para requisições repetidas
- [ ] Fallback funciona quando Embrapa está offline

### Qualidade e Manutenibilidade
- [ ] Código modular e bem estruturado
- [ ] Tratamento de erros robusto
- [ ] Logs informativos sobre cache hits/misses
- [ ] Documentação atualizada (README, Swagger)
- [ ] Testes unitários para funcionalidades de cache

## Considerações de Performance
- Cache deve reduzir tempo de resposta em pelo menos 80% para dados já cacheados
- Fallback deve responder em menos de 100ms quando dados estão em cache
- Sistema deve suportar pelo menos 100 requisições simultâneas

## Considerações de Segurança
- Redis deve estar acessível apenas internamente
- Senhas e credenciais via variáveis de ambiente
- Logs não devem expor informações sensíveis

## Entregáveis
1. Dockerfile otimizado para produção
2. docker-compose.yml completo
3. Sistema de cache implementado
4. Documentação atualizada
5. Testes de integração
6. Scripts de deployment

## Cronograma Estimado
- Dockerização: 2-3 horas
- Implementação Redis: 3-4 horas  
- Sistema de cache: 4-5 horas
- Testes e documentação: 2-3 horas
- Total: 11-15 horas 