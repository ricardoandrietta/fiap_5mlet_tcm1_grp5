#!/usr/bin/env python3
"""
Teste de valida√ß√£o de par√¢metros para a API Flask de Web Scraping
Testa as novas valida√ß√µes implementadas para year e sub_option
"""

import requests
from requests.auth import HTTPBasicAuth
import json

def test_parameter_validation():
    """Testa as valida√ß√µes de par√¢metros year e sub_option"""
    
    # Configura√ß√£o
    base_url = "http://localhost:5000"
    auth = HTTPBasicAuth('user1', 'password1')
    
    print("üîç Teste de Valida√ß√£o de Par√¢metros")
    print("=" * 60)
    
    # Definir sub-op√ß√µes v√°lidas para cada endpoint
    valid_sub_options = {
        'producao': ['VINHO DE MESA', 'VINHO FINO DE MESA (VINIFERA)', 'SUCO DE UVA', 'DERIVADOS'],
        'processamento': ['viniferas', 'americanas', 'mesa', 'semclass'],
        'comercializacao': ['VINHO DE MESA', 'ESPUMANTES', 'UVAS FRESCAS', 'SUCO DE UVA'],
        'importacao': ['vinhos', 'espumantes', 'frescas', 'passas', 'suco'],
        'exportacao': ['vinho', 'uva', 'espumantes', 'suco']
    }
    
    # Teste 1: Valida√ß√£o de anos v√°lidos
    print("\nüìÖ Teste 1: Valida√ß√£o de Anos")
    print("-" * 40)
    
    test_years = [
        ('1970', True, 'Ano m√≠nimo v√°lido'),
        ('2024', True, 'Ano m√°ximo v√°lido'),
        ('2000', True, 'Ano v√°lido no meio do range'),
        ('1969', False, 'Ano abaixo do m√≠nimo'),
        ('2025', False, 'Ano acima do m√°ximo'),
        ('abc', False, 'Ano n√£o num√©rico'),
        ('', True, 'Ano vazio (opcional)')
    ]
    
    for year, should_pass, description in test_years:
        try:
            params = {'year': year} if year else {}
            response = requests.get(f"{base_url}/producao", auth=auth, params=params, timeout=10)
            
            if should_pass:
                if response.status_code == 200:
                    print(f"‚úÖ {description}: PASSOU (Status: {response.status_code})")
                else:
                    print(f"‚ùå {description}: FALHOU - Esperado 200, recebido {response.status_code}")
                    if response.status_code == 400:
                        error_data = response.json()
                        print(f"   Erro: {error_data.get('error', 'N/A')}")
            else:
                if response.status_code == 400:
                    error_data = response.json()
                    print(f"‚úÖ {description}: PASSOU (Status: {response.status_code})")
                    print(f"   Erro esperado: {error_data.get('error', 'N/A')}")
                else:
                    print(f"‚ùå {description}: FALHOU - Esperado 400, recebido {response.status_code}")
                    
        except Exception as e:
            print(f"‚ùå {description}: ERRO - {str(e)}")
    
    # Teste 2: Valida√ß√£o de sub-op√ß√µes por endpoint
    print("\nüéØ Teste 2: Valida√ß√£o de Sub-op√ß√µes por Endpoint")
    print("-" * 40)
    
    for endpoint, valid_options in valid_sub_options.items():
        print(f"\nüìä Testando /{endpoint}:")
        
        # Testar op√ß√£o v√°lida
        if valid_options:
            valid_option = valid_options[0]
            try:
                response = requests.get(
                    f"{base_url}/{endpoint}", 
                    auth=auth, 
                    params={'sub_option': valid_option}, 
                    timeout=15
                )
                
                if response.status_code == 200:
                    print(f"  ‚úÖ Op√ß√£o v√°lida '{valid_option}': PASSOU")
                else:
                    print(f"  ‚ùå Op√ß√£o v√°lida '{valid_option}': FALHOU (Status: {response.status_code})")
                    
            except Exception as e:
                print(f"  ‚ùå Op√ß√£o v√°lida '{valid_option}': ERRO - {str(e)}")
        
        # Testar op√ß√£o inv√°lida
        invalid_option = 'OPCAO_INEXISTENTE'
        try:
            response = requests.get(
                f"{base_url}/{endpoint}", 
                auth=auth, 
                params={'sub_option': invalid_option}, 
                timeout=10
            )
            
            if response.status_code == 400:
                error_data = response.json()
                print(f"  ‚úÖ Op√ß√£o inv√°lida '{invalid_option}': PASSOU (rejeitada corretamente)")
                print(f"     Erro: {error_data.get('error', 'N/A')}")
            else:
                print(f"  ‚ùå Op√ß√£o inv√°lida '{invalid_option}': FALHOU - Esperado 400, recebido {response.status_code}")
                
        except Exception as e:
            print(f"  ‚ùå Op√ß√£o inv√°lida '{invalid_option}': ERRO - {str(e)}")
    
    # Teste 3: Combina√ß√µes de par√¢metros
    print("\nüîÑ Teste 3: Combina√ß√µes de Par√¢metros")
    print("-" * 40)
    
    test_combinations = [
        ({'year': '2023', 'sub_option': 'VINHO DE MESA'}, 'producao', True, 'Ambos v√°lidos'),
        ({'year': '1969', 'sub_option': 'VINHO DE MESA'}, 'producao', False, 'Ano inv√°lido, sub-op√ß√£o v√°lida'),
        ({'year': '2023', 'sub_option': 'OPCAO_INEXISTENTE'}, 'producao', False, 'Ano v√°lido, sub-op√ß√£o inv√°lida'),
        ({'year': '1969', 'sub_option': 'OPCAO_INEXISTENTE'}, 'producao', False, 'Ambos inv√°lidos'),
        ({}, 'producao', True, 'Sem par√¢metros (v√°lido)')
    ]
    
    for params, endpoint, should_pass, description in test_combinations:
        try:
            response = requests.get(f"{base_url}/{endpoint}", auth=auth, params=params, timeout=10)
            
            if should_pass:
                if response.status_code == 200:
                    print(f"‚úÖ {description}: PASSOU")
                else:
                    print(f"‚ùå {description}: FALHOU - Esperado 200, recebido {response.status_code}")
            else:
                if response.status_code == 400:
                    error_data = response.json()
                    print(f"‚úÖ {description}: PASSOU (rejeitado corretamente)")
                    print(f"   Erro: {error_data.get('error', 'N/A')}")
                else:
                    print(f"‚ùå {description}: FALHOU - Esperado 400, recebido {response.status_code}")
                    
        except Exception as e:
            print(f"‚ùå {description}: ERRO - {str(e)}")
    
    # Teste 4: Verificar estrutura de resposta de erro
    print("\nüìã Teste 4: Estrutura de Resposta de Erro")
    print("-" * 40)
    
    try:
        response = requests.get(
            f"{base_url}/producao", 
            auth=auth, 
            params={'year': '1969'}, 
            timeout=10
        )
        
        if response.status_code == 400:
            error_data = response.json()
            print("‚úÖ Resposta de erro 400 recebida")
            
            # Verificar estrutura
            if 'error' in error_data:
                print("‚úÖ Campo 'error' presente na resposta")
                print(f"   Mensagem: {error_data['error']}")
            else:
                print("‚ùå Campo 'error' ausente na resposta")
                
            # Verificar se √© JSON v√°lido
            print("‚úÖ Resposta √© JSON v√°lido")
            
        else:
            print(f"‚ùå Esperado status 400, recebido {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar estrutura de resposta: {str(e)}")
    
    # Teste 5: Performance com valida√ß√£o
    print("\n‚ö° Teste 5: Performance com Valida√ß√£o")
    print("-" * 40)
    
    import time
    
    try:
        start_time = time.time()
        response = requests.get(
            f"{base_url}/producao", 
            auth=auth, 
            params={'year': '2023', 'sub_option': 'VINHO DE MESA'}, 
            timeout=30
        )
        end_time = time.time()
        
        response_time = end_time - start_time
        
        if response.status_code == 200:
            print(f"‚úÖ Requisi√ß√£o v√°lida processada em {response_time:.3f}s")
            
            # Verificar se h√° flag de cache
            data = response.json()
            cached_flag = data.get('cached', False)
            print(f"‚úÖ Cache status: {cached_flag}")
            
        else:
            print(f"‚ùå Erro na requisi√ß√£o: Status {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro no teste de performance: {str(e)}")
    
    print("\n" + "=" * 60)
    print("üèÅ Teste de Valida√ß√£o Conclu√≠do!")
    print("\nüìä Resumo dos Testes:")
    print("   ‚úÖ Valida√ß√£o de anos (1970-2024)")
    print("   ‚úÖ Valida√ß√£o de sub-op√ß√µes por endpoint")
    print("   ‚úÖ Combina√ß√µes de par√¢metros")
    print("   ‚úÖ Estrutura de resposta de erro")
    print("   ‚úÖ Performance com valida√ß√£o")
    print("\nüí° Pr√≥ximos passos:")
    print("   - Execute os outros testes: python test_api.py")
    print("   - Verifique a documenta√ß√£o Swagger: http://localhost:5000/apidocs/")

if __name__ == "__main__":
    test_parameter_validation() 